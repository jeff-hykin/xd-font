define-operator "~>" 880 'right' : syntax-rules
	`(@l ~> @r) `{.left @l .right @r}

export all : define [buildCCMP chain-rule markGlyphs commonList features lookups] : begin
	commonList.push 'ccmp'
	set features.ccmp {'ccmp1' 'ccmp2'}
	
	let [groupA {'A' 'a' 'u' 'cyrA' 'cyra'}] : set lookups.ccmp1
		.type 'gsub_chaining'
		.subtables : list
			chain-rule
				{'i' 'cyrUkrainiani' 'j' 'cyrje' 'iogonekBelow'} ~> {'dotlessi' 'dotlessi' 'dotlessj' 'dotlessj' 'iogonek.dotless'}
				markGlyphs.above ~> null
			chain-rule {'eta'} ({'iotaBelow'} ~> {'iotaLF'})
			chain-rule {'eta'} markGlyphs.all ({'iotaBelow'} ~> {'iotaLF'})
			chain-rule {'eta'} markGlyphs.all markGlyphs.all ({'iotaBelow'} ~> {'iotaLF'})
			chain-rule {'eta'} markGlyphs.all markGlyphs.all markGlyphs.all ({'iotaBelow'} ~> {'iotaLF'})
			chain-rule groupA ({'ogonekBelow'} ~> {'ogonekTR'})
			chain-rule groupA markGlyphs.all ({'ogonekBelow'} ~> {'ogonekTR'})
			chain-rule groupA markGlyphs.all markGlyphs.all ({'ogonekBelow'} ~> {'ogonekTR'})
			chain-rule groupA markGlyphs.all markGlyphs.all markGlyphs.all ({'ogonekBelow'} ~> {'ogonekTR'})
	
	set lookups.ccmp2
		.type 'gsub_ligature'
		.subtables : list : object
			psilivaria {'commaAbove' 'graveAbove'}
			psilioxia {'commaAbove' 'acuteAbove'}
			psiliperispomeni {'commaAbove' 'perispomeniAbove'}
			dasiavaria {'revCommaAbove' 'graveAbove'}
			dasiaoxia {'revCommaAbove' 'acuteAbove'}
			dasiaperispomeni {'revCommaAbove' 'perispomeniAbove'}