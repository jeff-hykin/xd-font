define-operator "~>" 880 'right' : syntax-rules
	`(@l ~> @r) `{.left @l .right @r}

define [flatten] : begin
	local ans {}
	foreach [term : items-of : {}.slice.call arguments 0] : begin
		if (term <@ Array)
		: then : set ans : ans.concat term
		: else : ans.push term
	return ans

export all : define [buildOPBD chain-rule lookupOrder commonList features lookups] : begin
	local fwclose {'fwlcloseDoubleQuote' 'fwlcloseSingleQuote' 'dwlcjkSingleQuoteRight' 'dwlcjkDoubleQuoteRight' 'dwlparenRight'}
	local hwclose {'closeDoubleQuote' 'closeSingleQuote' 'cjkSingleQuoteRight' 'cjkDoubleQuoteRight' 'opbdParenRight'}
	local fwopen {'fwropenDoubleQuote' 'fwropenSingleQuote' 'dwrcjkSingleQuoteLeft' 'dwrcjkDoubleQuoteLeft' 'dwrparenLeft'}
	local hwopen {'openDoubleQuote' 'openSingleQuote' 'cjkSingleQuoteLeft' 'cjkDoubleQuoteLeft' 'opbdParenLeft'}
	local fwquoteopen {'fwropenDoubleQuote' 'fwropenSingleQuote'}
	local hwquoteopen {'openDoubleQuote' 'openSingleQuote'}
	local fwtrail {'dwlperiod' 'dwlcomma' 'dwlcjkperiod' 'dwlcjkcomma'}
	local hwtrail {'period' 'comma' 'cjkperiod' 'cjkcomma'}
	local fwmid {'dwccolon' 'dwcsemicolon'}
	local hwmid {'colon' 'semicolon'}
	
	commonList.push 'opbd'
	set features.opbd {'opbd1'}
	set lookups.opbd1
		.type 'gsub_chaining'
		.subtables : list
			chain-rule [flatten fwtrail hwtrail fwopen hwopen fwmid hwmid] (fwopen ~> hwopen)
			chain-rule (fwclose ~> hwclose) [flatten fwtrail hwtrail fwclose hwclose fwopen hwopen fwmid hwmid]